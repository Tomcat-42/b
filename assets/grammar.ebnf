Program = { Definition };

Definition = VarDefinition | FnDefinition;
VarDefinition = Name, [ "[", [ Constant ], "]" ], [ Ival, { ",", Ival } ], ";";
FnDefinition = Name, "(", [ Name, { ",", Name } ], ")", Statement;

Ival = Constant | Name;

Statement = AutoStatement | ExtrnStatement | LabelStatement | CaseStatement
          | BlockStatement | IfStatement | WhileStatement | SwitchStatement
          | GotoStatement | ReturnStatement;
AutoStatement   = "auto", Name, [ Constant ], { ",", Name, [ Constant ] }, ";", Statement;
ExtrnStatement  = "extrn", Name, [ ",", Name ], ";", Statement;
LabelStatement  = Name, ":", Statement;
CaseStatement   = "case", Constant, ":", Statement;
BlockStatement  = "{", { Statement }, "}";
IfStatement     = "if", "(", Rvalue, ")", Statement, [ "else", Statement ];
WhileStatement  = "while", "(", Rvalue, ")", Statement;
SwitchStatement = "switch", Rvalue, Statement;
GotoStatement   = "goto", Rvalue, ";";
ReturnStatement = "return", [ "(", Rvalue, ")" ], ";";

Rvalue = RvalueParen | RValueLvalue | RvalueConstant | RvalueAssign
       | RvalueIncDecPrefix | RvalueIncDecPostfix | RvalueUnary
       | RvalueAddressOf | RvalueConditional | RvalueFnCall;
RvalueParen         = "(", Rvalue, ")";
RValueLvalue        = Lvalue;
RvalueConstant      = Constant;
RvalueAssign        = Lvalue, Assign, Rvalue;
RvalueIncDecPrefix  = IncDec, Lvalue;
RvalueIncDecPostfix = Lvalue, IncDec;
RvalueUnary         = Unary, Rvalue;
RvalueAddressOf     = "&", Lvalue;
RvalueConditional   = Rvalue, "?", Rvalue, ":", Rvalue;
RvalueFnCall        = Rvalue, "(", [ Rvalue, { ",", Rvalue } ], ")";

Lvalue = LvalueName | LvalueDeref | LvalueIndex;
LvalueName  = Name;
LvalueDeref = "*", Rvalue;
LvalueIndex = Rvalue, "[", Rvalue, "]";

Assign = "=", [ Binary ];

IncDec = Inc | Dec;
Inc = "++";
Dec = "--";

Binary = Or | And | Equal | NotEqual | LessThan | LessOrEqual | GreaterThan 
       | GreaterOrEqual | LeftShift | RightShift | Minus | Plus | Modulo 
       | Times | Div;
Or             = "|";
And            = "&";
Equal          = "==";
NotEqual       = "!=";
LessThan       = "<";
LessOrEqual    = "<=";
GreaterThan    = ">";
GreaterOrEqual = ">=";
LeftShift      = "<<";
RightShift     = ">>";
Minus          = "-";
Plus           = "+";
Modulo         = "%";
Times          = "*";
Div            = "/";

Unary = Minus | Not;
Not = "!";

Constant = ConstantInt | ConstantChar | ConstantString;
ConstantInt = Digit, { Digit }; 

ConstantChar = "'", Character, [ Character ], "'";
ConstantString = '"', { Character }, '"';

Name = Alpha, { AlphaDigit };

AlphaDigit = Alpha | Digit; 
Alpha = [a-zA-Z_];
Digit = [0-9];

Character = ? any character ?;
